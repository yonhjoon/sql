--1. 70년대 생(1970~1979) 중 여자이면서 전씨인 사원의 이름과 주민번호, 부서 명, 직급 조회
-- 여자사원 출력
SELECT EMP_NAME,EMP_NO
FROM EMPLOYEE
WHERE SUBSTR(EMP_NO,8,1)='2' OR SUBSTR(EMP_NO,8,1)='4';

--70년대 생(1970~1979) 출력
SELECT EMP_NAME,EMP_NO
FROM EMPLOYEE
WHERE SUBSTR(EMP_NO,1,6) > '70/01/01' AND SUBSTR(EMP_NO,1,6) < '79/01/01';

-- 70년대 생 여자사원 출력
SELECT EMP_NAME,EMP_NO,DEPT_TITLE, JOB_NAME
FROM EMPLOYEE
JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
JOIN JOB USING (JOB_CODE)
WHERE (SUBSTR(EMP_NO,1,2) > '70' AND SUBSTR(EMP_NO,1,2) < '79')
        AND SUBSTR(EMP_NO,8,1)='2';

-- 전체 출력
SELECT EMP_NAME,EMP_NO,DEPT_TITLE, JOB_NAME
FROM EMPLOYEE
JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
JOIN JOB USING (JOB_CODE)
WHERE (SUBSTR(EMP_NO,1,2) > '70' AND SUBSTR(EMP_NO,1,2) < '79')
        AND SUBSTR(EMP_NO,8,1)='2'
        AND EMP_NAME LIKE '전%';

--2. 나이 상 가장 막내의 사원 코드, 사원 명, 나이, 부서 명, 직급 명 조회
--EXTRACT(YEAR FROM SYSDATE) = EXTRACT 특정 날짜 추출 코드인데 안에있는 컬럼의 SYSDATE(현재날짜) 추출
--EXTRACT(YEAR FROM(TO_DATE(SUBSTR(EMP_NO, 1, 2), 'RR'))) + 1 = 
--EXTRACT (YEAT( 연도 ) FROM( 부를거야 ) ( ( TO_DATE ( (SUBSTR(EMP_NO, 1, 2)= 연생-예-62)) ) , 'RR'= 연생부르는거) ) +1 ( 1 더할거야 ))
--EXTRACT(YEAR FROM SYSDATE) - EXTRACT(YEAR FROM(TO_DATE(SUBSTR(EMP_NO, 1, 2), 'RR'))) + 1 AS "나이"
SELECT EMP_NAME,EMP_NO, EXTRACT(YEAR FROM SYSDATE) - EXTRACT(YEAR FROM(TO_DATE(SUBSTR(EMP_NO, 1, 2), 'RR'))) + 1 AS "나이",
        DEPT_TITLE, JOB_NAME
FROM EMPLOYEE
JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
JOIN JOB USING(JOB_CODE)
WHERE  EXTRACT(YEAR FROM SYSDATE) - EXTRACT(YEAR FROM(TO_DATE(SUBSTR(EMP_NO, 1, 2), 'RR')))=
      (SELECT MIN(EXTRACT(YEAR FROM SYSDATE) - EXTRACT(YEAR FROM(TO_DATE(SUBSTR(EMP_NO, 1, 2), 'RR'))))
         FROM EMPLOYEE);

--3. 이름에 ‘형’이 들어가는 사원의 사원 코드, 사원 명, 직급 조회
SELECT EMP_ID, EMP_NAME, JOB_NAME
FROM EMPLOYEE
JOIN JOB USING (JOB_CODE)
WHERE EMP_NAME LIKE '%형%';

--4. 부서코드가 D5이거나 D6인 사원의 사원 명, 직급 명, 부서 코드, 부서 명 조회
SELECT EMP_NAME, JOB_NAME, DEPT_ID, DEPT_TITLE
FROM EMPLOYEE
JOIN JOB USING (JOB_CODE)
JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
WHERE DEPT_CODE IN ('D5','D6');

--5. 보너스를 받는 사원의 사원 명, 부서 명, 지역 명 조회
SELECT EMP_NAME, DEPT_TITLE, LOCAL_NAME, BONUS
FROM EMPLOYEE
JOIN DEPARTMENT ON(DEPT_CODE = DEPT_ID)
JOIN LOCATION ON (LOCATION_ID = LOCAL_CODE)
WHERE BONUS IS NOT NULL;

--6. 사원 명, 직급 명, 부서 명, 지역 명 조회
SELECT EMP_NAME,JOB_NAME, DEPT_TITLE, LOCAL_NAME
FROM EMPLOYEE
JOIN JOB USING (JOB_CODE)
JOIN DEPARTMENT ON(DEPT_CODE = DEPT_ID)
JOIN LOCATION ON (LOCATION_ID = LOCAL_CODE);

--7. 한국이나 일본에서 근무 중인 사원의 사원 명, 부서 명, 지역 명, 국가 명 조회
SELECT EMP_NAME,JOB_NAME, DEPT_TITLE, NATIONAL_NAME
FROM EMPLOYEE
JOIN JOB USING (JOB_CODE)
JOIN DEPARTMENT ON(DEPT_CODE = DEPT_ID)
JOIN LOCATION ON (LOCATION_ID = LOCAL_CODE)
JOIN NATIONAL USING (NATIONAL_CODE)
WHERE NATIONAL_NAME IN ('한국','일본');

--8. 한 사원과 같은 부서에서 일하는 사원의 이름 조회 (자체조인 활용)
SELECT E.EMP_NAME AS "사번", E.DEPT_CODE AS "부서", D.EMP_NAME AS "동료"
FROM EMPLOYEE E
JOIN EMPLOYEE D ON (E.DEPT_CODE = D.DEPT_CODE)
WHERE E.EMP_NAME != D.EMP_NAME
ORDER BY E.EMP_NAME;




--9. 보너스가 없고 직급 코드가 J4이거나 J7인 사원의 이름, 직급 명, 급여 조회(NVL 이용)
SELECT EMP_NAME, JOB_NAME, SALARY
FROM EMPLOYEE
JOIN JOB USING (JOB_CODE)
WHERE NVL(BONUS,0) IS NULL OR JOB_CODE IN ('J4','J7')
        AND BONUS IS NULL
ORDER BY SALARY DESC;

SELECT EMP_NAME,JOB_CODE, SALARY
FROM EMPLOYEE
WHERE JOB_CODE IN ('J4','J7') AND BONUS IS NULL
ORDER BY SALARY DESC;

--10. 보너스 포함한 연봉이 높은 5명의 사번, 이름, 부서 명, 직급, 입사일, 순위 조회
SELECT EMP_NAME, ROUND ((SALARY + (NVL(BONUS,0))) * 12) AS "순위"
FROM EMPLOYEE
JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
JOIN JOB USING (JOB_CODE)
ORDER BY SALARY DESC;

SELECT EMP_ID, EMP_NAME, DEPT_TITLE, JOB_NAME, HIRE_DATE, 연봉
FROM (SELECT EMP_ID, EMP_NAME, DEPT_TITLE, JOB_NAME, HIRE_DATE, 
      ROUND (SALARY + (SALARY * NVL(BONUS,0))) * 12 AS "연봉"
        FROM EMPLOYEE
        JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
        JOIN JOB USING (JOB_CODE)
        ORDER BY SALARY DESC)
WHERE ROWNUM <=5;

--11. 부서 별 급여 합계가 전체 급여 총 합의 20%보다 많은 부서의 부서 명, 부서 별 급여 합계 조회


--11-1. JOIN과 HAVING 사용


--11-2. 인라인 뷰 사용


--11-3. WITH 사용


--12. 부서 명과 부서 별 급여 합계 조회


--13. WITH를 이용하여 급여 합과 급여 평균 조회








