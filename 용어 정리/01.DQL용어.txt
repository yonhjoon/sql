<SELECT>
        SELECT 가지고오고 싶은 정보 FROM 테이블;
        SELECT (*) 또는 컬럼1, 컬럼2, 컬럼3... FROM 테이블;


-- DULA : 오라클에서 제공해주는 가상데이터 테이블이다
             .(현업에서는 더미데이터 라고 한다 임시 데이터라는 뜻)


<컬럼명에 별칭 지정하기>
    산술연산을 하게되면 컬럼명이 지저분해진다. 이때 컬럼명에 별칭을 부여해서 깔끔하게 가져올수 있다.
    [표현법]
    컬럼명 별칭 / 컬럼명 as 별칭 / 컬럼명 "별칭" / 컬럼명 as "별칭


<리터럴> 그냥 특정한 값을 지정할때
    임의로 지정한 문자열('')
    조회된 결과(RESULT SET 리졀트 셋)의 모든 행에 반복적으로 출력


<연결연산자 : ||>
    여러 컬럼값들을 마치 하나의 컬럼처럼 연결할수 있다.


 <DISTINCT>
     중복제게 - 컬럼에 포기된 값들을 한번씩만 조회할 때


<WHERE 절>
    조회하고자하는 테이블로부터 특정 조건에 만족하는 데이터만을 조회할 떄 사용
    조건식에서도 다양한 연산자 사용이 가능
    [표현법]
    SELECT 컬럼,컬럼,컬럼 연산
    FROM 테이블
    WHERE 조건;
    
    >>비교연산자<<
    > , < , >= , <= : 대소비교
    =               : 양쪽이 같다 - 동등비교
    !=, ^=, <>      : 양쪽이 다르다.



<AND, OR 연산자>
        조건을 여러개 연결할 때 사용한다.
        [표현법]
        조건A AND 조건B  ->  조건A와 조건B 모두 만족하는 값만 가져온다.
        조건A OR 조건B  -> 조건A와 조건B중 하나라도 만족하는 값은  가지고 온다.
        
        
        <BETWEEN AND>
        조건식에 사용되는 구문
        몇이상 몇이하인 범위에 대한 조건을 제시할 떄 사용하는 연산자(이상,이하만 가능)
        
        [표현법]
        비교대상 컬럼 BERWEEN 하안값  AND 상한값 (AND보다 높고 BERWEEN 보다 낮을떄)




 <LIKE>
    비교하고자하는 컬럼값이 내가 제시한 특정 패턴에 만족할 경우에 조회
    
    [표현법]
    비교할 대상컬럼 LIKE '특정패턴'; (일치하는 것만 가져온다.) (LIKE가 와일드카드)
    
    특정패턴을 제시할 때 와일드카드라는 특정패턴이 정의되어있다.
    1. '%' : 포함문자 검색 (0글자이상 전부 조회)
     EX) 비교할대상컬럼 LIKE '문자%' : 비교대상컬럼값 중에서 해당문자로 시작하는 값들만 조회
         비교할대상컬럼 LIKE '%문자' : 비교대상컬럼값 중에서 해당문자로 끝나는 값들만 조회
         비교할대상컬럼 LIKE '%문자%' : 비교대상컬럼값 중에서 해당문자가 포함된 값 조회
    
    2. '_' : 1글자를 대체하는 검색
     EX) 비교할대상컬럼 LIKE '_문자' : 비교대상컬럼값 문자앞에 아무글자나 한글자가 있는 값을 조회
         비교할대상컬럼 LIKE '문자_' : 비교대상컬럼값 문자뒤에 아무글자나 한글자가 있는 값을 조회
         비교할대상컬럼 LIKE '_문자-' : 비교대상컬럼값 문자앞뒤에 아무글자나 한글자가 있는 값을 조회
         
         비교할대상컬럼 LIKE '_____문자' : 비교대상컬럼값 문자앞에 아무글자나 N글자가 있는 값을 조회
         비교할대상컬럼 LIKE '문자_____' : 비교대상컬럼값 문자뒤에 아무글자나 N글자가 있는 값을 조회
         비교할대상컬럼 LIKE '_____문자_____' : 비교대상컬럼값 문자앞뒤에 아무글자나 N글자가 있는 값을 조회




<IN>
    WHERE절에서 비교대상 컬럼값이 내가 제시한 목록중에 일치하는 값이 있는지 검사
    
    [표현법]
    비교대상컬럼 IN ('값1',값2',...)


<IS NULL & IS NOT NULL>
    컬럼값에 NULL이 있을경우 NULL값을 비교하기 위해서는 위의 연산자를 사용해야한다.


<연선자 우선순위>
    1. 산술연산자
    2. 연결연산자
    3. 비교연산자
    4. IS NULL / LIKE / IN
    5. BERWEEN A AND B
    6. NOT
    7. AND
    8. OR


<ORDER BY 절>
    SELECT문 가장 마지막 줄에 작성, 실행순서 또한 가장 마지막에 실행한다.
    
    [표현법]
    SELECT 조회할 컬럼....
    FROM 조회할 테이블
    WHERE 조건식
    ORDER BY 정렬기준이 될 컬럼명  | 별칭으로도 할 수 있다.  (가장 마지막 출력이라 별칭명이 가능하다) | 
              컬럼순번 [ASC | DESC] [NULL FIRST | NULL LAST]
              
    - ASC : 오름차순 (작은 값으로 시작해서 값이 점점 커지는 것) -> 기본값 (NULL이 가장 맨뒤)
    - DESC : 내림차순 (큰 값으로 시작해서 값이 점점 줄어드는 것) (NULL이 가장 맨앞)
    
    -- NULL은 기본적으로 가장 큰값으로 분류해서 정렬한다.
    - NULLS FIRST : 정렬하고자하는 컬럼값에 NULL이 있을 경우 해당데이터 맨 앞에 배치(DESC일때 기본값)
    - NULLS LAST : 정렬하고자 하는 컬럼값에 NULL이 있을 경우 해당데이터 맨 마지막에 배치 (ASC일때 기본값)


--ORDER BY BONUS; -- 기본값이 오름차순
--ORDER BY BONUS ASC;
--ORDER BY BONUS ASC NULLS FIRST;
--ORDER BY BONUS DESC; --NULL FIRST 기본

















































