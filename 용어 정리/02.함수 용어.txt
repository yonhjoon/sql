<함수 FUNCTION>
    전달된 컬럼값을 읽어들여서 함수를 실행한 결과를 반환한다.
    
    - 단일행 함수 : N개의 값을 읽어들여서 N개의 결과값을 리턴한다.(매행마다 함수실행결과를 반환한다.)
    - 그룹함수 : N개의 값을 읽어들여서 1개의 결과값을 리턴한다. (그룹을 지어 그룹별로 함수 실행결과 반환)
    
    >> SELECT 절에 단일행 함수랑 그룹함수를 함께 사용하지 못함!!
    왜? 결과 행의 갯수가 다르기 때문에
    
    >> 함수식을 기술할 수 있는 위치 : SELECT절 WHERE절 ORDER BY절 GROUP BY절 HAVING절





--====================<단일행 함수>==================================

<문자 처리 함수>
    
    * LENGTH(컬럼 | '문자열') 해당 문자열의 글자수를 반환
    * LENGTHB (컬럼 | '문자열') : 해당 문자열의 바이트수를 반환
    
    
    '최' '나' 'ㄱ' 한글은 글자당 3 BYTE
    영문자, 숫자, 특수문자 글자당 1 BYTE



*INSTR
    문자열로부터 특정 문자의 시작위치를 찾아서 반환해준다.
    
    INSTR(컬럼 | '문자열', '찾고자하는 문자', ['찾을 위치의 시작값', 순번]) => 결과는 NUMBER 로 나옴




 * SUBSTR / 자주쓰임
    문자열에서 특정 문자열을 추출해서 반환해준다.
    
    [표현법]
    SUBSTR(STRING, POSITION, [LENGTH])
    - STRING : 문자타입의 컬럼 | '문자열'
    - POSITION : 문자열 추출할 시작위치의 값
    - LENGTH : 추출할 문자 갯수 (생략하면 끝까지)


-- 함수 중첩사용 가능


 * LPAD / RPAD
    문자열을 조회할 때 동일감있게 조회하고자 할 때 사용
    
    [표현법]
    LPAD/RPAD(STRING, 최종적으로 변환할 문자의 길이, [덧붙이고자하는 문자])
    
    문자열에 덧붙이고자하는 문자를 왼쪽 또는 오른쪽에 분여서 최종 N길이만큼의 문자열을 반환



* LTRIM / RERIM
    문자열에서 특정 문자를 제거한 나머지를 반환
     LTRIM / RERIM (STRING, [제거하고자하는 문자들])
     
     문자열의 왼쪽 혹은 오른쪽에서 제거하고자하는 문자들을 찾아서 제거한 나머지문자열을 반환



    * TRIM
    문자열의 앞/뒤/양쪽에 있는 지정한 문자들을 제거한 나머지 문자열 반환
    TRIM([LEADING  |  TRAILNG  |  BOTH] 제거하고자하는 문자열 FROM 문자열)




* LOWER / UPPER / INITCAP
    
    LOWER : 다 소문자로 변경한 문자열 반환
    UPPER : 다 대문자로 변경한 문자열 반환
    INITCAP : 띄어쓰기 기준 첫 글자마다 대문자로 변경한 문자열 반환



 *CONCAT
    문자열 두개 전달받아서 하나로 합친 후 반환해준다.
    CONCAT (STRING1, STRING2)


* REPLACE
    특정문자열에서 특정부분을 다른부분으로 교체
    REPLACE (문자열, 찾을 문자열, 변경할문자열)



<숫자 처리 함수>


*ABS
    숫자의 절대값을 구해주는 함수

*MOD
    두 수를 나눈 나머지값을 반환해주는 함수
    MOD (NUMBER, NUMBER)


*ROUND
    반올림한 결과를 반환
    
    ROUND (NUMBER, [위치])


 * CEIL
 올림 처리를 위한 함수
 
  [표현법]
  CEIL (NUMBER)



* FLOOR
    바람처리 함수
    
    [표현법]
    FLOOR (NUMBER)



 *TRUNC
    버림처리 함수
    
    [표현법]
    TRUNC (NUMBER, [위치] )




 <날짜 처리 함수>

-- *SYSDARE : 시스템의 현재 날씨및 시간을 반환환다.


-- *MONTHS_BETWEEN : 두 날짜 사이의 개월 수

-- *ADD_MONTHS : 특정 날짜에 NUMBER개월수를 더해서 반환한다.

-- *NEXT_DAY (DATE, 요일(문자 | 숫자)) : 특정날짜 이후 가장 가까운 요일의 날짜를 반환한다.

-- *LAST_DAY(DATE) : 해당월의 마지막 날짜 구해서 반환한다.



-- 언어변경
ALTER SESSION SET NLS_LANGUAGE = AMERICAN; -- 영어로 언어 변경
ALTER SESSION SET NLS_LANGUAGE = KOREAN; -- 한국어로 언어 변경




*EXTRACT : 특정 날짜로부터 년도|월|일 값을 추출해서 반환하는 함수
    
    [표현법]
    EXTRACT(YEAR FROM DATE) : 연도 만 추출하고싶을때
    EXTRACT(MONTH FROM DATE) : 월 만 추출하고싶을때
    EXTRACT(DAY FROM DATE) : 일 만 추출하고싶을때
    => 결과는 NUMBER



 [형변환 함수]
    * TO_CHAR : 숫자 타입 또는 날짜 타입의 값을 문자타입으로 변환시켜주는 함수
    
    [표현법]
    TO_CHAR(숫자 | 날짜, [포맷]) 


-- 숫자타입 --> 문자타입
SELECT TO_CHAR(1234) FROM DUAL;
SELECT TO_CHAR(1234, '99999') AS "NUMBER" FROM DUAL;  -- 9의 자리수만큼 공간확보, 오른쪽 정렬, 빈칸공백이 생긴다
SELECT TO_CHAR(1234, '00000') AS "NUMBER" FROM DUAL; -- 0의 자리수만큼 공간확보, 오른쪽 정렬, 빈칸을 0으로 채움
SELECT TO_CHAR(1234, 'L99999') FROM DUAL; -- 현재 설정된 나라의 로컬 화폐단위 포함
SELECT TO_CHAR(1234, '$99999') FROM DUAL; -- 달러로 나옴
SELECT TO_CHAR(3500000, 'L9,999,999') FROM DUAL; -- , 표시 나오게


--날짜타입 => 문자타입
SELECT SYSDATE FROM DUAL;
SELECT TO_CHAR(SYSDATE) FROM DUAL;
SELECT TO_CHAR(SYSDATE, 'HH:MI:SS') FROM DUAL;
SELECT TO_CHAR(SYSDATE, 'PM HH:MI:SS') FROM DUAL; -- AM, PM 어떤 것을 쓰던 형식에 맞춰나옴
SELECT TO_CHAR(SYSDATE, 'HH24:MI:SS') FROM DUAL; -- 24시간으로 표현
SELECT TO_CHAR(SYSDATE, 'YYYY-MM-DD DY') FROM DUAL;  --DAY 월요일 DY 월
SELECT TO_CHAR(SYSDATE, 'MON, YYYY') FROM DUAL;



--사원들의 이름, 입사날짜(0000년 00월 00일)
SELECT EMP_NAME, TO_CHAR(HIRE_DATE, 'YYYY"년" MM"월" DD"일"') -- 정해진 형식대로만 사용가능하다.
FROM EMPLOYEE;


--년도와 관련된 포맷
SELECT TO_CHAR(SYSDATE, 'YYYY'), --
       TO_CHAR(SYSDATE, 'YY'),
       TO_CHAR(SYSDATE, 'RRRR'), -- RR룰이 따로 존재한다 -> 50년이상값이 + 100 -> EX) 1954 
       TO_CHAR(SYSDATE, 'RR'),
       TO_CHAR(SYSDATE, 'YEAR')
FROM DUAL;

SELECT HIRE_DATE, TO_CHAR(HIRE_DATE) FROM EMPLOYEE;

--월과 관련된 포맷
SELECT TO_CHAR(SYSDATE, 'MM'), -- 이번달 숫자 두자리 > 02
       TO_CHAR(SYSDATE, 'MON'), -- 2월
       TO_CHAR(SYSDATE, 'MONTH') -- 약어로 나옴
FROM DUAL;


--일에 관련된 포맷
SELECT TO_CHAR(SYSDATE, 'DDD'), -- 오늘이 이번년도에서 몇번째 일수 (24년 2월 19일 기준 050 = 50일)
       TO_CHAR(SYSDATE, 'DD'), -- 오늘 일자
       TO_CHAR(SYSDATE, 'D')  -- 요일 - > 숫자로 표시
FROM DUAL; 


--요일에 대한 포맷
SELECT TO_CHAR(SYSDATE, 'DAY'), -- 월요일
       TO_CHAR(SYSDATE, 'DY') -- 월
FROM DUAL;

--=============================================================================


/*
    TO_DATE : 숫자타입 또는 문자타입을 날짜타입으로 변경하는 함수
    
    TO_DATE(숫자 | 문자, [포멧] ) -> DATE 
*/
SELECT TO_DATE(20100101) FROM DUAL;
SELECT TO_DATE(240219) FROM DUAL; -- 50년 미만은 자동으로 20XX으로 설정되고 50년 이상은 19XX로 설정된다.

SELECT TO_DATE(020505) FROM DUAL; -- 숫자는 0으로 시작하면 안됨
SELECT TO_DATE('020505') FROM DUAL; -- 문자로 하면 됨 -> ''

SELECT TO_DATE('20240219 120800') FROM DUAL; -- 포멧을 정해줘야 시,분,초를 표시할 수 있다
SELECT TO_DATE('20240219 120800', 'YYYYMMDD HH24MISS') FROM DUAL;


/*
    TO_NUMBER : 문자타입의 데이터를 숫자타입으로 변환시켜주는 함수
    
    [표현법]
    TO_NUMNER(문자, [포멧])
*/

SELECT TO_NUMBER ('100,000', '999,999') + TO_NUMBER('55,000', '99,999')
FROM DUAL;


/*
    [NULL 처리 함수]
*/

-- NVL(컬럼, 해당컬럼이 NULL일 경우 보여줄 값)
SELECT EMP_NAME, NVL(BONUS,0)
FROM EMPLOYEE;



--NVL2 (컬럼, 반환값1, 반환값2)
-- 반환값 1 : 해당컬럼이 존재할 경우 보여줄 값
-- 반환값 2 : 해당컬럼이 NULL일 경우 보여줄 값

SELECT EMP_NAME, BONUS, NVL2(BONUS, 'O', 'X')
FROM EMPLOYEE;


--NULLIF (비교대상1, 비교대상2)
-- 두 값이 일치하면 NULL 반환한다.
-- 두 값이 일치하지않는다면 비교대상1 반환한다.
SELECT NULLIF('123', '123') FROM DUAL;
SELECT NULLIF('123', '456') FROM DUAL;


/*
    [선택함수]
    *DECODE(비교하고자하는 대상(컬럼, 연산식, 함수식), 비교값1, 결과값1, 비교값2, 결과값2,  비교값3, 결과값3...)
    
    SWITCH(비교대상){
    CASE 비교값1:
        실행코드
    CASE 비교값2:
        실행코드
    ...
    }
*/


/*
    * CASE WHEN THEN
    
    CASE WHEN 조건식1 THEN 결과값1
         WHEN 조건식2 THEN 결과값2
         ...
         ELSE 결과값
    END
*/

------------그룹함수----------------------

-- 1. SUM(숫자타임컬럼) : 해당컬럼 값들의 총 합계를 구해서 반환해주는 함수

-- 2. AVG(NUMBER) : 해당 컬럼값들의 평균값을 구해서 반환

-- 3. MIN(모든타입가능) : 해당컬럼값 중 가장 작은 값 구해서 반환하기

-- 4. MAX(모든 타입 가능) : 해당 컬럼값들 중에 가장 큰 값을 구해서 반환

-- 5. COUNT(* | 컬럼 | DISTINCT 컬럼) : 해당 조건에 맞는 행의 갯수를 세서 반환
-- COUNT(*) : 조회된 결과에 모든 행의 갯수를 세서 반환
-- COUNT(컬럼) : 제시한 해당 컬럼값이 NULL이 아닌 것만 행의 갯수를 세서 반환
-- COUNT(DISTINCT 컬럼) : 해당 컬럼값 중북을 제거한 후 행의 갯수 세서 반환