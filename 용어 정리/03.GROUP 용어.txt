

<GROUP BY절>
    그룹기준을 제시할 수 있는 구문(해당 그룹기준별로 여러 그룹으로 묶을 수 있음)
    여러개의 값들을 하나의 그룹으로 묶어서 처리하는 목적으로 사용


[HAVING 절]
    그룹에 대한 조건을 제시할 때 사용되는 구문(주로 그룹함수식을 가지고 조건을 만듬)


/*
    SELECT * | 조회하고싶은 컬럼 AS 별칭 | 함수식 | 산술연산식         -- 5번째 인식 후 출력
    FROM 조회하고자하는 테이블 | DUAL (DUAL 은 가상 테이블)           -- 1번째 인식 후 출력
    WHERE 조건식 (연산자들을 활용하여 기술)         -- 2번째 인식 후 출력
    GROUP BY 그룹기준이 되는 컬럼 | 함수식         -- 3번째 인식 후 출력
    HAVING 조건식 (그룹함수를 가지고 기술)         -- 4번째 인식 후 출력
    ORDER BY 컬럼 | 별칭 | 순서 [ASC | DESC] [NULLS FIRST | NULLS LAST] -- 6번째 인식 후 출력
    
    1.FROM 으로 조회 하고 
    2.WHERE로 조건을 조회하고 
    3.GROUP BY으로 그룹을 묶을것이냐 조회하고
    4.HAVING로 그룹함수 조건을 조회하고 
    5.SELECT 로 컬럼 조회 하고 
    6.ORDER BY 로 정렬한다.
*/


/*
    집합 연산자 == SET OPERATION
    여러개의 쿼리문을 하나의 쿼리문으로 만드는 연산자
    쿼리 : DB에서 원하는 조건에 맞는 데이터를 조작할 수 있는 SQL 문장의 집합
    
    -UNION : OR | 합집합( 두 쿼리문 수행한 결과값을 더한다. )
    -INTERSECT : AND | RYWLQGKQ( 두 쿼리문을 구행한 결과값에 중복된 결과값 )
    -UNION ALL : 합집합 + 교집합 ( 중복되는게 두번 표현될 수 있다. )
    -MINOS : 차집합 ( 선행결과값에 후행결과값을 뺸 나머지 )
*/

-- 집합연사자 사용시 주의사항*
-- 컬럼의 개수는 똑같아야 합니다.
-- 컬럼자리마다 동일한 타입으로 기술해야한다.
-- 정렬하고싶다면 ORDER BY는 마지막에 기술한다.



-- 3, UNION ALL : 여러개의 쿼리 결과를 무조건 다 더하는 연산자

-- 4. MINUS : 선행 SELECT결과에서 후행 SELECT결과를 뺸 나머지(차집합
